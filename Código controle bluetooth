from machine import Pin
import time
import bluetooth

# === Configuração dos pinos da ponte H ===
A_1A = Pin(22, Pin.OUT)  # Motor Direito
A_1B = Pin(23, Pin.OUT)
B_1A = Pin(19, Pin.OUT)  # Motor Esquerdo
B_1B = Pin(21, Pin.OUT)

# === LED de status (opcional) ===
led = Pin(2, Pin.OUT)
led.off()

# === Funções de controle dos motores ===
def motores_frente():
    A_1A.value(1)
    A_1B.value(0)
    B_1A.value(1)
    B_1B.value(0)

def motores_tras():
    A_1A.value(0)
    A_1B.value(1)
    B_1A.value(0)
    B_1B.value(1)

def curva_direita():
    A_1A.value(0)
    A_1B.value(1)
    B_1A.value(1)
    B_1B.value(0)

def curva_esquerda():
    A_1A.value(1)
    A_1B.value(0)
    B_1A.value(0)
    B_1B.value(1)

def parar_motores():
    A_1A.value(0)
    A_1B.value(0)
    B_1A.value(0)
    B_1B.value(0)

# === Inicializa BLE ===
ble = bluetooth.BLE()
ble.active(True)

# === UUIDs do serviço UART ===
UART_SERVICE_UUID = bluetooth.UUID("6E400001-B5A3-F393-E0A9-E50E24DCCA9E")
UART_RX_UUID = bluetooth.UUID("6E400002-B5A3-F393-E0A9-E50E24DCCA9E")
UART_TX_UUID = bluetooth.UUID("6E400003-B5A3-F393-E0A9-E50E24DCCA9E")

UART_SERVICE = (
    (UART_SERVICE_UUID, (
        (UART_TX_UUID, bluetooth.FLAG_NOTIFY),
        (UART_RX_UUID, bluetooth.FLAG_WRITE),
    )),
)

# === Callback BLE ===
def bt_irq(event, data):
    if event == 1:  # Conectado
        conn_handle, addr_type, addr = data
        print("Conectado a:", bytes(addr).hex(':'))

    elif event == 2:  # Desconectado
        print("Desconectado")
        start_advertising()

    elif event == 3:  # Dados recebidos
        conn_handle, value_handle = data
        value = ble.gatts_read(value_handle)
        print("Dados recebidos:", value.hex())

        # === Decodificação dos comandos do Dabble GamePad ===
        if value == b'\xff\x01\x01\x01\x02\x00\x01\x00':  # CIMA
            motores_tras()
            led.on()
            print("TRAS")

        elif value == b'\xff\x01\x01\x01\x02\x00\x02\x00':  # BAIXO
            motores_frente()
            led.off()
            print("FRENTE")

        elif value == b'\xff\x01\x01\x01\x02\x00\x04\x00':  # ESQUERDA
            curva_esquerda()
            print("ESQUERDA")

        elif value == b'\xff\x01\x01\x01\x02\x00\x08\x00':  # DIREITA
            curva_direita()
            print("DIREITA")

        elif value == b'\xff\x01\x01\x01\x02\x00\x00\x00':  # PARAR
            parar_motores()
            print("PARAR")

# === Configura BLE ===
ble.irq(bt_irq)
ble.gatts_register_services(UART_SERVICE)

# === Início do anúncio BLE ===
def start_advertising():
    name = "ESP32-CarroBLE"
    adv_data = bytearray(b'\x02\x01\x06') + bytearray((len(name) + 1, 0x09)) + name.encode()
    adv_data += bytearray(b'\x03\x03\x6E\x40')
    ble.gap_advertise(100, adv_data)
    print("Anunciando como:", name)

start_advertising()
print("Pronto para conexão BLE...")

# === Loop principal ===
try:
    while True:
        time.sleep(0.1)

except KeyboardInterrupt:
    print("Encerrando execução")
    parar_motores()
    led.off()
    ble.active(False)
